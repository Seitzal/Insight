  /**
   * Generates a new numeric column from the specified numeric column by applying the specified function to each of its values.
   * Behaves analogous to Scala's map()
   * @param cname The variable name of the numeric column from which to derive the new column
   * @param func The function to apply to each value
   * @return The derived numeric column
   */
  def derive(cname : String, func : Double => Double) : NumCol = getCol(cname) match {
    case NumCol(v) => new NumCol(v.map(func))
    case StrCol(v) => throw new NotNumericException(cname)
    case _         => throw new InvalidColException(cname)
  }

    /**
   * Generates a new numeric column from the specified numeric or non-numeric column by applying the specified function to each of its values.
   * Behaves analogous to Scala's map()
   * @param cname The variable name of the numeric or non-numeric column from which to derive the new column
   * @param func The function to apply to each value
   * @return The derived numeric column
   */
  def sderive(cname : String, func : String => Double) : NumCol = getCol(cname) match {
    case StrCol(v) => new NumCol(v.map(func))
    case NumCol(v) => new NumCol(v.map((x : Double) => x.toString).map(func))
    case _         => throw new InvalidColException(cname)
  }

  /**
   * Generates a new non-numeric column from the specified numeric or non-numeric column by applying the specified function to each of its values.
   * Behaves analogous to Scala's map()
   * @param cname The variable name of the numeric or non-numeric column from which to derive the new column
   * @param func The function to apply to each value
   * @return The derived non-numeric column
   */
  def sderiveStr(cname : String, func : String => String) : StrCol = getCol(cname) match {
    case StrCol(v) => new StrCol(v.map(func))
    case NumCol(v) => new StrCol(v.map((x : Double) => x.toString).map(func))
    case _         => throw new InvalidColException(cname)
  }

    /**
   * Generates a new non-numeric column from the specified numeric or non-numeric column by applying the specified function to each of its values.
   * Behaves analogous to Scala's map()
   * @param cname The variable name of the numeric or non-numeric column from which to derive the new column
   * @param func The function to apply to each value
   * @return The derived non-numeric column
   */
  def deriveStr(cname : String, func : Double => String) : StrCol = getCol(cname) match {
    case NumCol(v) => new StrCol(v.map(func))
    case StrCol(v) => throw new NotNumericException(cname)
    case _         => throw new InvalidColException(cname)
  }

  /**
   * Returns the sum of all values of the specified numeric column.
   * @param cname The variable name of the numeric column of which the sum should be calculated.
   * @return The sum of the column.
   */
  def sum(cname : String) : Double = getCol(cname) match {
    case nc : NumCol => nc.sum
    case sc : StrCol => throw new NotNumericException(cname)
    case _           => throw new InvalidColException(cname)
  }

  /**
   * Returns the arithmetic mean of all values of the specified numeric column.
   * @param cname The variable name of the numeric column of which the average should be calculated.
   * @return The average of the column.
   */
  def avg(cname : String) : Double = getCol(cname) match {
    case nc : NumCol => nc.avg
    case sc : StrCol => throw new NotNumericException(cname)
    case _           => throw new InvalidColException(cname)
  }

  /**
   * Derives from the given numeric column a new numeric column containing the individual deviations of each element from the column's average.
   * Used internally for calculating variance, standard deviation and any related measures.
   * @param cname The variable name of the numeric column of which the deviation column should be created.
   * @return A new numeric column containing the individual deviations of each element from the given column's average.
   */
  def deviations(cname : String) : NumCol = getCol(cname) match {
    case nc : NumCol => nc.deviations
    case sc : StrCol => throw new NotNumericException(cname)
    case _           => throw new InvalidColException(cname)
  }